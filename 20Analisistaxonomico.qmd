# Análisis taxonómico con RStudio

## **Explora nuestras muestras en niveles taxonómicos específicos**

Con la información de asignación taxonómica obtenida de Kraken, hemos medido la diversidad y visualización de los taxones de cada muestra con Krona y Pavian. Phyloseq nos permite una visualización más flexible y personalizada. Ahora, usaremos Phyloseq para generar gráficos de abundancia de los taxones de nuestras muestras.

Comenzaremos nuestra exploración a nivel de filo. Para agrupar todas las OTU que comparten la misma taxonomía en un rango taxonómico determinado, utilizaremos la función `tax_glom()`.

``` r
> percentages_glom <- tax_glom(percentages, taxrank = 'Phylum') > View(percentages_glom@tax_table@.Data)
```

![](figures/antax1.png){fig-align="center"}

Otra función de phyloseq es `psmelt()`, que combina objetos phyloseq en un `data.frame` para manipularlos con paquetes como `ggplot2`y `vegan`.

``` r
> percentages_df <- psmelt(percentages_glom) > str(percentages_df)
```

Ahora, creemos otro marco de datos con los datos originales. Esta estructura nos permitirá comparar la abundancia absoluta con la relativa y obtener una visión completa de nuestras muestras.

``` r
> absolute_glom <- tax_glom(physeq = merged_metagenomes, taxrank = "Phylum") 
> absolute_df <- psmelt(absolute_glom) 
> str(absolute_df)
```

Estos objetos podemos compararlos con un gráfico

``` r
 > absolute_df$Phylum <- as.factor(absolute_df$Phylum) 
 > phylum_colors_abs<- colorRampPalette(brewer.pal(8,"Dark2")) (length(levels(absolute_df$Phylum))) 
```

Ahora, creemos la figura para los datos con abundancias absolutas (*es decir,* `absolute_plot` objeto)

``` r
> absolute_plot <- ggplot(data= absolute_df, aes(x=Sample, y=Abundance, fill=Phylum))+      geom_bar(aes(), stat="identity", position="stack")+     scale_fill_manual(values = phylum_colors_abs)
```

Con el comando `position="stack"`, le indicamos a la `ggplot` que los valores deben apilarse para cada muestra. De esta manera, tendremos todas nuestras diferentes categorías (OTU) apiladas en una barra, y no cada una en una separada. Para más información, [position_stack](https://ggplot2.tidyverse.org/reference/position_stack.html)

A continuación, crearemos la figura para la representación de los datos de abundancia relativa y le pediremos a RStudio que nos muestre ambas gráficas gracias a la `|`función de la biblioteca `patchwork`:

```         
> percentages_df$Phylum <- as.factor(percentages_df$Phylum) 
> phylum_colors_rel<- colorRampPalette(brewer.pal(8,"Dark2")) (length(levels(percentages_df$Phylum))) 
> relative_plot <- ggplot(data=percentages_df, aes(x=Sample, y=Abundance, fill=Phylum))+      geom_bar(aes(), stat="identity", position="stack")+     scale_fill_manual(values = phylum_colors_rel) 
> absolute_plot | relative_plot
```

![](figures/antax2.png){fig-align="center"}

De inmediato, podemos observar la diferencia entre las dos gráficas y cómo el procesamiento de los datos puede mejorar la visualización de los resultados reales. Sin embargo, es evidente que tenemos demasiados taxones para distinguir adecuadamente el color de cada uno, y menos de los que presentan la mayor abundancia. Para solucionar esto, utilizaremos el poder de los marcos de datos y R. Modificaremos la identificación de las OTU cuya abundancia relativa sea inferior al 0,2 %:

```         
> percentages_df$Phylum <- as.character(percentages_df$Phylum) # Return the Phylum column to be of type character 
> percentages_df$Phylum[percentages_df$Abundance < 0.5] <- "Phyla < 0.5% abund." 
> unique(percentages_df$Phylum)
```

Pidamos a R que muestre las cifras nuevamente ejecutando nuevamente nuestro código:

```         
> percentages_df$Phylum <- as.factor(percentages_df$Phylum) > phylum_colors_rel<- colorRampPalette(brewer.pal(8,"Dark2")) (length(levels(percentages_df$Phylum))) > relative_plot <- ggplot(data=percentages_df, aes(x=Sample, y=Abundance, fill=Phylum))+    geom_bar(aes(), stat="identity", position="stack")+   scale_fill_manual(values = phylum_colors_rel) > absolute_plot | relative_plot
```

![](figures/a.png){fig-align="center"}

## Explorando linajes

Phyloseq ofrece numerosas herramientas para gestionar y explorar datos. Analicemos una función que ya usamos, el comando `subset_taxa` se usa para extraer linajes específicos de un nivel taxonómico determinado; lo hemos usado para descartar las lecturas que no pertenecen a bacterias con `merged_metagenomes <- subset_taxa(merged_metagenomes, Kingdom == "Bacteria")`.

Lo usaremos ahora para extraer un filo específico de nuestros datos y explorarlo a un nivel taxonómico inferior: género. Tomaremos como ejemplo el filo cianobacterias.

``` r
> cyanos <- subset_taxa(merged_metagenomes, Phylum == "Cyanobacteria") > unique(cyanos@tax_table@.Data[,2])
```

Hagamos un pequeño repaso de todo lo que vimos hoy: **Transformación de los datos; Manipulación de la información; y graficación** :

```         
> cyanos_percentages <- transform_sample_counts(cyanos, function(x) x*100 / sum(x) ) 
> cyanos_glom <- tax_glom(cyanos_percentages, taxrank = "Genus") 
> cyanos_df <- psmelt(cyanos_glom) 
> cyanos_df$Genus[cyanos_df$Abundance < 10] <- "Genera < 10.0 abund" 
> cyanos_df$Genus <- as.factor(cyanos_df$Genus) 
> genus_colors_cyanos<- colorRampPalette(brewer.pal(8,"Dark2")) (length(levels(cyanos_df$Genus)))   
> plot_cyanos <- ggplot(data=cyanos_df, aes(x=Sample, y=Abundance, fill=Genus))+      geom_bar(aes(), stat="identity", position="stack")+     scale_fill_manual(values = genus_colors_cyanos) 
> plot_cyanos
```

![](figures/antax3.png){fig-align="center"}

## Referencias

[Introducción a Phyloseq](http://www.castrolab.org/teaching/data_analysis/intro-phyloseq.html)

[Phyloseq by Joey711](https://joey711.github.io/phyloseq/)
