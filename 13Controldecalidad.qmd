# Control de calidad

### Flujos de análisis bioinformático en metagenómica

Al trabajar con datos de secuenciación, los reads/lecturas que obtienes del secuenciador deben pasar a través de varias herramientas para generar el resultado final deseado. La ejecución de este conjunto de herramientas en un orden específico se conoce como pipeline o flujo de análisis.

![](figures/03-02-01.png){fig-align="center"}

Estos pipelines adoptan un enfoque plug-and-play en el sentido de que el archivo de salida de uno de ellos es fácilmente convertido en archivo de salida para el siguiente.

### Detalles del [formato FASTQ](https://en.wikipedia.org/wiki/Phred_quality_score)

Aunque pueda parecer complicado, el formato FASTQ sigue un patrón de 4 líneas que facilitan su interpretación.

1.  La primera línea siempre comienza con '\@' seguido de la información del read/lectura.
2.  La segunda línea es la propia secuencia de DNA.
3.  La tercera línea siempre comienza con el signo '+' y algunas veces contiene la misma información de reads que la primera línea.
4.  La cuarta línea es una cadena de caracteres que representa los valores de calidad y estrictamente debe tener el mismo número de caracteres que la línea 2.

``` {.bash eval="FALSE"}
$ cd ~/dc_workshop/data/untrimmed_fastq/

$ gunzip JP4D_R1.fastq.gz

$ head -n 4 JP4D_R1.fastq
```

Each quality score represents the probability that the corresponding nucleotide call is incorrect. These probability values are the results of the base calling algorithm and depend on how much signal was captured for the base incorporation. This quality score is logarithmically based, so a quality score of 10 reflects a base call accuracy of 90%, but a quality score of 20 reflects a base call accuracy of 99%. In this [link](https://drive5.com/usearch/manual/quality_score.html) you can find more information about quality scores.

In real life, you won’t be assessing the quality of your reads by visually inspecting your FASTQ files. Instead, you’ll use a software program to assess read quality and filter out poor reads. We’ll first use a program called [FastQC](http://www.bioinformatics.babraham.ac.uk/projects/fastqc/) to visualize the quality of our reads. Later in our workflow, we’ll use another program to filter out poor-quality reads.

First, let’s make available our metagenomics software:

### Activando ambiente Metagenómico

Environments are part of a bioinformatic tendency to do reproducible research; they are a way to share and maintain our programs in their needed versions used for a pipeline with our colleagues and our future self. FastQC has not been activated in the (base) environment, but this AWS instance came with an environment called metagenomics. We need to activate it in order to start using FastQC.

We will use [Conda](https://docs.conda.io/en/latest/) as our environment manager. Conda is an open-source package and environment management system that runs on Windows, macOS and Linux. Conda environments are activated with the `conda activate` direction:

``` bash
$ conda activate metagenomics
# (metagenomics) $
```

Now, if we call [FastQC](https://www.bioinformatics.babraham.ac.uk/projects/fastqc/), a long help page will be displayed on our screen.

``` bash
fastqc -h
#FastQC - A high throughput sequence QC analysis tool
#
#SYNOPSIS
#
#        fastqc seqfile1 seqfile2 .. seqfileN
#
#    fastqc [-o output dir] [--(no)extract] [-f fastq|bam|sam]
#           [-c contaminant file] seqfile1 .. seqfileN
#
#DESCRIPTION
#
#    FastQC reads a set of sequence files and produces from each one a quality
#    control report consisting of many different modules, each one of
#    which will help to identify a different potential type of problem in your
#    data.
```

### Control de calidad con FastQC

FastQC has several features that can give you a quick impression of any problems your data may have, so you can consider these issues before moving forward with your analyses. Rather than looking at quality scores for each read, FastQC looks at quality collectively across all reads within a sample. The image below shows one FastQC-generated plot that indicates a very high-quality sample:

![](figures/03-02-03.png){fig-align="center"}

![](figures/03-02-04.png){fig-align="center"}

### Corre FastQC

We will now assess the quality of the reads that we downloaded. First, make sure you’re still in the `untrimmed_fastq` directory.

``` bash
$ cd ~/dc_workshop/data/untrimmed_fastq/ 
```

FastQC acepta múltiples archivos como entrada, tanto archivos comprimidos como descomprimidos, por lo que podemos usar el comodín `\*.fastq*` para ejecutar FastQC en todos los archivos FASTQ en este directorio.

```         
$ fastqc *.fastq* 
```

Verás un mensaje de salida que se actualiza automáticamente, este indica el progreso del análisis. Comienza así:

``` o
Started analysis of JC1A_R1.fastq.gz                  Approx 5% complete for JC1A_R1.fastq.gz                Approx 10% complete for JC1A_R1.fastq.gz               Approx 15% complete for JC1A_R1.fastq.gz               Approx 20% complete for JC1A_R1.fastq.gz               Approx 25% complete for JC1A_R1.fastq.gz              Approx 30% complete for JC1A_R1.fastq.gz               Approx 35% complete for JC1A_R1.fastq.gz
```

FastQC tardará unos minutos en ejecutarse en nuestros cuatro archivos FASTQ. Al finalizar el análisis, volverá a aparecer el mensaje. Su pantalla se verá así:

```         
Approx 80% complete for JP4D_R2.fastq.gz 
Approx 85% complete for JP4D_R2.fastq.gz 
Approx 90% complete for JP4D_R2.fastq.gz 
Approx 95% complete for JP4D_R2.fastq.gz 
Analysis complete for JP4D_R2.fastq.gz $
```

El programa FastQC ha creado varios archivos nuevos dentro de nuestro `data/untrimmed_fastq/`directorio.

``` bash
$ ls 
```

```         
JC1A_R1_fastqc.html  JC1A_R2_fastqc.html  
JP4D_R1.fastq        JP4D_R2_fastqc.html   JC1A_R1_fastqc.zip   JC1A_R2_fastqc.zip   JP4D_R1_fastqc.html  JP4D_R2_fastqc.zip 
JC1A_R1.fastq.gz     JC1A_R2.fastq.gz     JP4D_R1_fastqc.zip   JP4D_R2.fastq.gz
TruSeq3-PE.fa
```

Para cada archivo FASTQ de entrada, FastQC creó un archivo en formato `.zip` y `.html` con el mismo nombre. El archivo `.html` es una página web que muestra el informe resumido de cada una de nuestras muestras.

Queremos mantener nuestros archivos de datos y nuestros archivos de resultados separados, por lo que moveremos estos archivos de salida a un nuevo directorio dentro de nuestro `results/`directorio.

``` bash
$ mkdir -p ~/dc_workshop/results/fastqc_untrimmed_reads $ mv *.zip ~/dc_workshop/results/fastqc_untrimmed_reads/  
$ mv *.html ~/dc_workshop/results/fastqc_untrimmed_reads/
```

### Visualización de resultados con FastQC

Nos cambiamos a la carpeta donde movimos nuestros archivos.

```         
$ cd ~/dc_workshop/results/fastqc_untrimmed_reads/
```

En equipos de 5, Ejercicio de analizar calidad de archvios. 2 minutos.

Contestar ¿Qué muestras tienen la mejor calidad de secuencia de bases? ¿Qué muestras tienen la peor?

## Referencias

Aquí puedes encontrar mayor información sobre cada una de las secciones del resultado de [FastQC.](https://www.bioinformatics.babraham.ac.uk/projects/fastqc/Help/)
