---
title: "Untitled"
author: "Yahir c"
date: "2025-05-16"
output: html_document
---

# **Trabajar con archivos y directorios**

Realizamos un experimento de secuenciaci√≥n y tenemos cuatro archivos de resultados, que se almacenan en nuestro directorio `untrimmed_fastq`.

Navegue hasta su directorio `untrimmed_fastq`.

``` bash
$ cd ~/dc_workshop/data/untrimmed_fastq
```

``` bash
$ cat JC1A_R2.fastq
```

`cat` como acabas de ver al ejecutar el comando, cuando el archivo es muy grande (como los que tenemos), puede resultar molesto. Siempre puedes usar Ctrl+C para detener el comando.

El programa `less`es √∫til en este caso. `less`Abre el archivo como de solo lectura y permite navegar por √©l.

```         
$ less JC1A_R2.fastq
```

Algunos comandos de navegaci√≥n en `less` :

![Cuando est√©s dentro de `less` y quieras buscar un texto, haz esto:](images/clipboard-2423031106.png)

-   **Buscar hacia adelante**

1.- Pulsa `/` (la barra)

2.- Escribe la palabra o frase que buscas

3.- Pulsa `Enter`

`less` saltar√° a la **primera** vez que aparezca despu√©s de donde est√°s.

-   **Repetir la misma b√∫squeda hacia adelante**

1.- Sin escribir nada nuevo,

2.- pulsa `/` `Enter`

`less` saltar√° a la **siguiente** aparici√≥n en el archivo.

-   **Buscar hacia atr√°s**

1.- Pulsa `?` (el signo de interrogaci√≥n) 2.- Escribe la palabra que buscas

3.- Pulsa `Enter`

`less` saltar√° a la **√∫ltima** aparici√≥n antes de donde est√°s.

### Ver solo el principio o el final

A veces solo quieres echar un vistazo r√°pido al inicio o al cierre de un archivo muy largo. Para ello:

-   **Primeras l√≠neas** con `head`\
    ``` head``archivo.txt ``` muestra las primeras 10 l√≠neas por defecto `head -n 5 archivo.txt`muestra solo las primeras 5 l√≠neas

-   **Ultimas l√≠neas** con `tail`

    `tail archivo.txt` muestra las √∫ltimas 10 l√≠neas por defecto `tail -n 5 archivo.txt`muestra solo las √∫ltimas 5 l√≠neas

## üõ†Ô∏è **Crear, mover, copiar y eliminar**

| Comando            | Qu√© hace                                   |
|--------------------|--------------------------------------------|
| `cp origen dest`   | Copia un archivo                           |
| `mkdir nombre`     | Crea un directorio                         |
| `mv origen dest`   | Mueve o renombra (si `dest` es un archivo) |
| `rm archivo`       | Elimina un archivo                         |
| `rm -r directorio` | Elimina un directorio y su contenido       |

Cuando trabajas con muchos archivos (o en un servidor remoto), usar la l√≠nea de comandos es m√°s r√°pido y seguro.

------------------------------------------------------------------------

### Copiar archivos (`cp`)

``` bash
cd ~/dc_workshop/data/untrimmed_fastq
cp JC1A_R2.fastq JC1A_R2-copy.fastq
```

### Crear directorios (`mkdir`)

``` bash
mkdir backup
```

### Mover y renombrar (`mv`)

**Mover a carpeta:**

``` bash
mv JC1A_R2-copy.fastq backup/
ls backup
# JC1A_R2-copy.fastq
```

**Renombrar:**

```         
cd backup
mv JC1A_R2-copy.fastq JC1A_R2-backup.fastq
ls
# JC1A_R2-backup.fastq
```

### Eliminar archivos y directorios (`rm`)

**Eliminar archivo:**

> ``` bash
> rm archivo.txt
> ```

**Eliminar carpeta recursivamente:**

``` bash
rm -r backup
```

# Redirecci√≥n de Entrada y Salida

## Objetivos

-   Buscar patrones en archivos (`grep`).\

-   Guardar o a√±adir resultados a archivos (`>`, `>>`).\

-   Contar l√≠neas (`wc -l`).\

-   Encadenar comandos con tuber√≠as (`|`).\

-   Automatizar con bucles `for`.

    ### Buscar patrones en archivos (`grep`).

`grep`es una utilidad de l√≠nea de comandos para buscar en archivos de texto plano l√≠neas que coincidan con un conjunto espec√≠fico de caracteres (a veces llamado cadena) o un patr√≥n particular (que se puede especificar mediante expresiones regulares).

En esta lecci√≥n, buscaremos manualmente cadenas de `N`"s" en los resultados de nuestra secuencia para ilustrar algunos principios de la b√∫squeda en archivos. Este tipo de b√∫squeda puede ser muy √∫til para evaluar la calidad de los resultados de la secuenciaci√≥n; sin embargo, en su investigaci√≥n, probablemente utilizar√° una herramienta bioinform√°tica con un programa integrado para filtrar lecturas de baja calidad. Aprender√° a usar esta herramienta en [una lecci√≥n posterior](https://carpentries-lab.github.io/metagenomics-analysis/02-assessing-read-quality/index.html) .

Busquemos la cadena NNNNNNNNNN en el archivo JC1A_R2.fastq.

```         
$ grep NNNNNNNNNN JC1A_R2.fastq
```

Este comando imprime en la terminal **todas** las l√≠neas del archivo `JC1A_R2.fastq` que contienen al menos 10 `N` consecutivas, sin importar lo largo o corto que sea el archivo.

Quiz√° nos interese no solo la propia secuencia que contiene estas `N`, sino tambi√©n el **identificador** de la lectura (la l√≠nea que precede inmediatamente a la secuencia en un archivo FASTQ) y sus **puntuaciones de calidad** (las dos l√≠neas que siguen a la secuencia). Para obtener toda esta informaci√≥n de cada lectura, podemos usar:

-   `-B1` ‚áí devuelve 1 l√≠nea **antes** de cada coincidencia (el identificador que empieza con `@`)

-   `-A2` ‚áí devuelve 2 l√≠neas **despu√©s** de cada coincidencia (la l√≠nea `+` y la cadena de calidad)

> ``` bash
> $ grep -B1 -A2 NNNNNNNNNN JC1A_R2.fastq
> ```

Uno de los bloques de l√≠neas que devuelve este comando es:

```{=html}
@MISEQ-LAB244-W7:91:000000000-A5C7L:1:2111:5300:24013 2:N:0:TCGAAG
NNNNNNNNNNNCNANNANNNNNCGCCGGTGTTCTNCTGGGGNACGGANACCGAGTAGATCGGAACAGCGTCGTGGAGNGAAAGAGTGTAGATCCCGGTGGGCGGCGTATCATTAAAAAAAAAACCTGCTGGTCCTTGTCTC
+
AAA11BB3333BGG1GGEC1E?0E0B0BFDGFHD2FBH110A1BEE?A/BAFBDGH///>FEGGG><@/#//?#?/#//????########################################################################################################################################################################
```

De esta forma obtenemos, para cada lectura que contiene las 10 `N` consecutivas, su **encabezado**, la **secuencia** completa y la **l√≠nea de calidad**, todo en un solo paso.

## Redirigir salida a un archivo

Cuando usamos `grep` para extraer lecturas de un FASTQ con un patr√≥n (p. ej. `NNNNNNNNNN`), toda la salida se imprime en pantalla. Para procesar esos resultados m√°s adelante, es mejor **redirigirlos a un archivo** en lugar de dejarlos volar por la terminal.

------------------------------------------------------------------------

### 1Ô∏è‚É£ Redirecci√≥n con `>`

-   El operador `>` toma la salida est√°ndar de un comando y la escribe en un fichero (sobrescribi√©ndolo si ya existe).\

-   **Ejemplo:** copiar todas las lecturas (identificador, secuencia y calidad) con 10 `N`s consecutivas a `bad_reads.txt`:

    ``` bash
    $ grep -B1 -A2 'NNNNNNNNNN' JC1A_R2.fastq > bad_reads.txt
    $ ls -l bad_reads.txt
    ```

    ### Contar l√≠neas, palabras y caracteres con `wc`

`wc` por s√≠ solo muestra tres valores:

1.  N√∫mero de l√≠neas

2.  N√∫mero de palabras

3.  N√∫mero de caracteres

    ``` bash
    $ wc bad_reads.txt
    # Por ejemplo: " 402  489 50076 bad_reads.txt"
    ```

Si solo quieres el n√∫mero de l√≠neas (por ejemplo, para saber cu√°ntas lecturas capturaste), usa `-l`:

``` bash
$ wc -l bad_reads.txt
# Por ejemplo: "402 bad_reads.txt"
```

## Evitar sobrescritura y usar tuber√≠as

### 1Ô∏è‚É£ Overwrite (`>`) vs Append (`>>`)

**`>`** crea o sobrescribe el archivo de salida.\
Solo contiene resultados de JC1A_R1.fastq:

``` bash
$ grep -B1 -A2 'NNNNNNNNNN' JC1A_R1.fastq > bad_reads.txt 
```

``` bash
$ wc -l bad_reads.txt # ‚Üí 24 l√≠neas
```

**`>>`** a√±ade al final del archivo sin borrar lo que ya hab√≠a.

Copiamos primero de `JC1A_R2.fastq`

``` bash
$ grep -B1 -A2 'NNNNNNNNNN' JC1A_R2.fastq > bad_reads.txt  
$ wc -l bad_reads.txt  # ‚Üí 402
```

Ahora a√±adimos de `JC1A_R1.fastq` sin borrar:

``` bash
$ grep -B1 -A2 'NNNNNNNNNN' JC1A_R1.fastq >> bad_reads.txt  
$ wc -l bad_reads.txt  # ‚Üí 426 (402 + 24)
```

### Sin archivos intermedios: tuber√≠as (`|`)

Si solo te interesa **ver** la salida o contar coincidencias, no necesitas crear `bad_reads.txt`. Usar **pipes**:

**Ver con paginaci√≥n**:

```         
$ grep -B1 -A2 'NNNNNNNNNN' JC1A_R2.fastq | less
```

Navega con flechas o `Space`/`b`, sale con `q`.

**Contar directamente**:

```         
$ grep -B1 -A2 'NNNNNNNNNN' *.fastq | wc -l
```

Esto te da el total de l√≠neas encontradas (divide entre 4 si quieres el n√∫mero de lecturas).
