# Ensamble metagenómico

**El proceso de ensamblaje agrupa las lecturas en contigs y estos en andamios para obtener (idealmente) la secuencia de un cromosoma completo.** Existen numerosos programas dedicados al ensamblaje [del genoma](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC2874646/) y el metagenoma; algunas de las principales estrategias que utilizan son la extensión Greedy, el OLC y los diagramas de De Bruijn. A diferencia del metabarcoding, la metagenómica shotgun requiere un paso de ensamblaje.

![](figures/03-04-01.png){fig-align="center"}

## Referencias

[MetaSPAdes](https://github.com/ablab/spades) es un ensamblador *de novo* para ensamblar datos metagenómicos grandes y complejos, y es uno de los más utilizados y recomendados. Forma parte del kit de herramientas SPAdes, que contiene varias secuencias de ensamblaje.

Algunos de los problemas a los que se enfrenta el ensamblaje metagenómico son:

-   Diferencias en la cobertura entre los genomas debido a las diferencias en abundancia en la muestra.

-   El hecho de que diferentes especies a menudo comparten regiones conservadas.

-   La presencia de varias cepas de una sola especie en la comunidad.

SPAdes ya aborda el problema de cobertura no uniforme en su algoritmo, por lo que es útil para el ensamblaje de comunidades simples, pero el algoritmo [metaSPAdes](https://pubmed.ncbi.nlm.nih.gov/28298430/) también aborda los otros problemas, lo que le permite ensamblar metagenomas a partir de comunidades complejas.

Veamos si nuestro programa está instalado correctamente:

``` bash
 $ metaspades.py 
```

```         
SPAdes genome assembler v3.15.0 [metaSPAdes mode]  Usage: spades.py [options] -o <output_dir>  
Basic options:   -o <output_dir>             directory to store all the resulting files (required)   --iontorrent                this flag is required for IonTorrent data   
  --test                      runs SPAdes on a toy dataset   
   -h, 
   --help                  prints this usage message    -v, 
   --version               prints version  

Input data:   
  --12 <filename>             file with interlaced forward and reverse paired-end reads   
  -1 <filename>               file with forward paired-end reads   
  -2 <filename>               file with reverse paired-end reads    
```

::: callout-tip
## Activa tu entorno

Si no tiene activado el entorno de metagenómica, el comando anterior debería haberle generado un error. Antes de continuar, active el entorno:
:::

``` bash
conda activate metagenomics
```

## **MetaSPAdes es un ensamblador metagenómico**

La ayuda que acabamos de ver nos indica cómo ejecutar `metaspades.py`. Usaremos las opciones más sencillas, especificando simplemente nuestras lecturas de extremo forward con `-1`y las lecturas reverse con `-2`, y el directorio de salida donde queremos que se almacenen los resultados.

```         
$ cd ~/dc_workshop/data/trimmed_fastq 
$ metaspades.py -1 JC1A_R1.trim.fastq.gz -2 JC1A_R2.trim.fastq.gz -o ../../results/assembly_JC1A 
```

Al finalizar la ejecución se muestra este mensaje:

```         
======= SPAdes pipeline finished.  SPAdes log can be found here: /home/dcuser/dc_workshop/results/assembly_JC1A/spades.log  Thank you for using SPAdes!  
```

Ahora, vayamos a los archivos de salida:

``` bash
$ cd ../../results/assembly_JC1A 
$ ls -F 
```

```         
assembly_graph_after_simplification.gfa  corrected/              K55/             scaffolds.fasta assembly_graph.fastg                     dataset.info            misc/            scaffolds.paths assembly_graph_with_scaffolds.gfa        first_pe_contigs.fasta  params.txt       spades.log before_rr.fasta                          input_dataset.yaml      pipeline_state/  strain_graph.gfa contigs.fasta                            K21/                    run_spades.sh    tmp/ contigs.paths                            K33/                    run_spades.yaml   
```

Como podemos ver, MetaSPAdes nos proporcionó una gran cantidad de archivos. Los que contienen el ensamblaje son \[nombre del archivo\] `contigs.fasta`y \[nombre del archivo\] `scaffolds.fasta`.

La carpeta `corrected`contiene las **lecturas corregidas con el algoritmo SPAdes.** Además, el archivo `assembly_graph_with_scaffolds.gfa`**contiene la información necesaria para visualizar nuestro ensamblaje mediante diferentes medios**, como programas como [Bandage](https://rrwick.github.io/Bandage/) .

Podemos reconocer a qué muestra corresponden nuestras salidas de ensamblaje porque se encuentran dentro de la carpeta de resultados de ensamblaje: `assembly_JC1A/`. Sin embargo, los archivos que contiene no tienen el ID de la muestra.

::: callout-note
## Calidad del ensamblaje

Puede utilizar diversas métricas para conocer la calidad de sus ensambles. [MetaQuast](https://quast.sourceforge.net/metaquast.html) es un programa que proporciona estas métricas para ensambles de metagenomas en un informe interactivo, archivos de texto y gráficos.
:::
